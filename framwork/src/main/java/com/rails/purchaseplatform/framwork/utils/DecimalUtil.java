package com.rails.purchaseplatform.framwork.utils;import java.text.DecimalFormat;import android.text.Spannable;import android.text.SpannableString;import android.text.SpannableStringBuilder;import android.text.TextUtils;import android.text.style.AbsoluteSizeSpan;import android.text.style.ForegroundColorSpan;/** * 说有数字格式化处理 * * @author sk */public class DecimalUtil {    /**     * 格式化double保留两位有效数字     *     * @return     */    public static String formatDouble(Double f) {        try {            DecimalFormat deFromat = new DecimalFormat("0.00");            String result = deFromat.format(f);            return result;        } catch (Exception e) {            // TODO Auto-generated catch block            return "0.00";        }    }    /**     * 格式化double保留两位有效数字     *     * @return     */    public static String formatNumber(Integer f, String format) {        try {            DecimalFormat deFromat = new DecimalFormat(format);            String result = deFromat.format(f);            return result;        } catch (Exception e) {            // TODO Auto-generated catch block            return "0.00";        }    }    /**     * double 类型的文字拼接，字体大小的变化     *     * @param startStr 开头字符串     * @param f        保留的数字     * @param endStr   结束字符串     * @return     */    public static SpannableStringBuilder formatDoubleSize(String startStr, double f, String endStr, int textSize) {        String price = formatDouble(f);        String bigPrice = price.substring(0, price.lastIndexOf("."));        int start = startStr.length();        int end = bigPrice.length() + start;        SpannableStringBuilder builder = new SpannableStringBuilder();        builder.append(startStr);        builder.append(price);        builder.setSpan(new AbsoluteSizeSpan(textSize, true), start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);        builder.append(endStr);        return builder;    }    /**     * double 类型的文字拼接，字体颜色的变化     *     * @param startStr 开头字符串     * @param obj      保留的数字     * @param endStr   结束字符串     * @return     */    public static SpannableStringBuilder formatStrColor(String startStr, String obj, String endStr, int textColor) {        int start = startStr.length();        int end = obj.length() + start;        SpannableStringBuilder builder = new SpannableStringBuilder();        builder.append(startStr);        builder.append(obj);        builder.setSpan(new ForegroundColorSpan(textColor), start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);        builder.append(endStr);        return builder;    }    /**     * double 类型的文字拼接，字体颜色的变化     *     * @param startStr 开头字符串     * @param obj      保留的数字     * @param endStr   结束字符串     * @return     */    public static SpannableStringBuilder formatStrColorSize(String startStr, String obj, String endStr, int textColor, int textSize) {        int start = startStr.length();        int end = obj.length() + start;        SpannableStringBuilder builder = new SpannableStringBuilder();        builder.append(startStr);        builder.append(obj);        builder.setSpan(new ForegroundColorSpan(textColor), start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);        builder.setSpan(new AbsoluteSizeSpan(textSize, true), start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);        builder.append(endStr);        return builder;    }    /**     * double 类型的文字拼接，字体颜色的变化     *     * @param startStr 开头字符串     * @param obj      保留的数字     * @param endStr   结束字符串     * @return     */    public static SpannableStringBuilder formatStrSize(String startStr, String obj, String endStr, int textSize) {        int start = startStr.length();        int end = obj.length() + start;        SpannableStringBuilder builder = new SpannableStringBuilder();        builder.append(startStr);        builder.append(obj);        builder.setSpan(new AbsoluteSizeSpan(textSize, true), start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);        builder.append(endStr);        return builder;    }    public static SpannableStringBuilder formatStr(String startStr, String obj, String endStr, int textColor, int textSize) {        int start = startStr.length();        int end = obj.length() + start;        SpannableStringBuilder builder = new SpannableStringBuilder();        builder.append(startStr);        builder.append(obj);        builder.setSpan(new ForegroundColorSpan(textColor), start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);        builder.append(endStr);        builder.setSpan(new AbsoluteSizeSpan(textSize, true), end, end + endStr.length(), Spannable.SPAN_INCLUSIVE_EXCLUSIVE);        return builder;    }}